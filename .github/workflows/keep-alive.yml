name: Keep Streamlit App Alive and Verified

on:
  schedule:
    # Runs every 14 minutes for consistent uptime.
    - cron: '2,16,30,44,58 * * * *'
  
  # Allows you to run this workflow manually from the Actions tab for testing.
  workflow_dispatch:

jobs:
  ping-and-health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Ping and Verify Streamlit App
        # THIS IS THE FIX: Explicitly tell the runner to use the bash shell.
        shell: bash
        run: |
          # --- Configuration ---
          APP_URL="https://etsa-survey.streamlit.app/"
          # Unique text that ONLY appears on the "app is asleep" page.
          SLEEP_PAGE_TEXT="This app has gone to sleep due to inactivity"
          # A reasonable minimum byte size for a healthy, fully-loaded Streamlit app.
          MINIMUM_CONTENT_LENGTH=2000
          
          # --- Execution ---
          echo " Pinging URL: ${APP_URL}"
          
          # Initialize variables for the retry loop.
          final_status_code=0
          attempt=0
          
          # Retry loop: Tries up to 3 times to get a successful response.
          for i in {1..3}; do
            attempt=$i
            echo "---"
            echo "‚û°Ô∏è Attempt #${attempt}..."
            
            # Use curl to get the HTTP status code and save the response body to a file.
            # -L: Follows all redirects (like the 303 error you saw).
            # -s: Silent mode (no progress meter).
            # -o response.html: Saves the HTML content to a file named 'response.html'.
            # -w '%{http_code}': Writes the final HTTP status code to stdout after the transfer.
            final_status_code=$(curl -L -s -o response.html -w "%{http_code}" --max-time 45 "${APP_URL}")
            
            if [ "$final_status_code" -eq 200 ]; then
              echo "‚úÖ SUCCESS: Received HTTP status code 200."
              break # Exit the loop on success.
            else
              echo "‚ö†Ô∏è WARN: Received HTTP status code ${final_status_code}. Retrying in 10 seconds..."
              sleep 10
            fi
          done

          # --- Verification ---
          echo "---"
          echo " VERIFYING RESPONSE..."

          # 1. Final Status Code Check
          if [ "$final_status_code" -ne 200 ]; then
            echo "‚ùå CRITICAL: Final attempt failed with HTTP status code ${final_status_code}."
            exit 1
          fi
          echo "‚úÖ Status Code Check: Passed (200 OK)."

          # 2. Sleep Page Content Check
          # grep -q quietly searches the file. If it finds the text, it returns success (0).
          if grep -q "${SLEEP_PAGE_TEXT}" response.html; then
            echo "‚ùå CRITICAL: The 'app is asleep' message was found on the page."
            exit 1
          fi
          echo "‚úÖ Sleep Page Check: Passed (Sleep message not found)."
          
          # 3. Content Length Check
          content_length=$(wc -c < response.html)
          echo "üìä Content length is ${content_length} bytes."
          if [ "$content_length" -lt "$MINIMUM_CONTENT_LENGTH" ]; then
            echo "‚ùå CRITICAL: Page content is smaller than the minimum threshold of ${MINIMUM_CONTENT_LENGTH} bytes."
            exit 1
          fi
          echo "‚úÖ Content Length Check: Passed."
          
          echo "---"
          echo "üéâ All checks passed. The app is up and healthy!"
