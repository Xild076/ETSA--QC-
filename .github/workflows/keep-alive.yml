name: Keep Streamlit App Alive and Verified

on:
  schedule:
    - cron: "*/15 * * * *"  # Runs every 15 minutes
  workflow_dispatch:

jobs:
  keep_alive:
    runs-on: ubuntu-latest
    env:
      APP_URL: https://etsa-survey.streamlit.app/
      SLEEP_PAGE_TEXT: "app is asleep"
      MINIMUM_CONTENT_LENGTH: 1000

    steps:
      - name: Keep App Alive and Verify
        shell: bash
        run: |
          max_retries=5
          for attempt in $(seq 1 $max_retries); do
            echo "---"
            echo "‚û°Ô∏è Attempt #${attempt}..."

            # Use curl with user-agent to mimic a browser
            final_status_code=$(curl -A "Mozilla/5.0" -L -s -o response.html -w "%{http_code}" --max-time 120 "${APP_URL}")

            # Check for meta or JS redirects (Cloudflare, etc)
            if grep -iq '<meta[^>]*http-equiv=["'"'"']refresh["'"'"']' response.html || grep -iq 'window.location' response.html || grep -iq 'Checking your browser' response.html; then
              echo "‚ùå CRITICAL: Detected meta or JS-based redirect/protection. Retrying in 15 seconds..."
              sleep 15
              continue
            fi

            if [ "$final_status_code" -eq 200 ]; then
              echo "‚úÖ SUCCESS: Received HTTP status code 200."
              break
            else
              echo "‚ö†Ô∏è WARN: Received HTTP status code ${final_status_code}. Retrying in 15 seconds..."
              sleep 15
            fi
          done

          echo "VERIFYING RESPONSE..."
          # Final Status Code Check
          if [ "$final_status_code" -ne 200 ]; then
            echo "‚ùå CRITICAL: Final attempt failed with HTTP status code ${final_status_code}."
            exit 1
          fi

          # Sleep Page Content Check
          if grep -q "${SLEEP_PAGE_TEXT}" response.html; then
            echo "‚ùå CRITICAL: The 'app is asleep' message was found on the page."
            exit 1
          fi
          echo "‚úÖ Sleep Page Check: Passed (Sleep message not found)."

          # Content Length Check
          content_length=$(wc -c < response.html)
          echo "üìä Content length is ${content_length} bytes."
          if [ "$content_length" -lt "$MINIMUM_CONTENT_LENGTH" ]; then
            echo "‚ùå CRITICAL: Page content is smaller than the minimum threshold of ${MINIMUM_CONTENT_LENGTH} bytes."
            exit 1
          fi
          echo "‚úÖ Content Length Check: Passed."
